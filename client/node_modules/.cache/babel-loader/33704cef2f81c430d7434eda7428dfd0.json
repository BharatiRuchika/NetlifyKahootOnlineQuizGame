{"ast":null,"code":"var _jsxFileName = \"/Users/ruchikaashokbharati/Documents/Projects/Backend_Kahoot-main/client/src/components/Game/Game.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { io } from 'socket.io-client';\nimport { connect } from 'react-redux';\nimport { selectedPin, editHostPins } from '../../Reducer/Reducer';\nimport sound1 from '../../Assets/counter.wav';\nimport GameQuestions from './Game_Questions';\nimport GameQuestionOver from './Game_Question_Over';\nimport Socket from \"../../Socket\";\nimport sound from '../../Assets/ting.mp3';\nimport jwt from \"jsonwebtoken\";\nimport \"./Game.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Game extends Component {\n  constructor() {\n    super();\n    this.state = {\n      pin: 0,\n      timer: 20,\n      isLive: false,\n      questionOver: false,\n      gameOver: false,\n      currentQuestion: 0,\n      questions: [],\n      players: [],\n      playersLength: 'false',\n      playerCounter: 0,\n      leaderBoard: []\n    };\n    this.questionOver = this.questionOver.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.audio = new Audio(sound);\n    this.audio1 = new Audio(sound1);\n  }\n\n  async componentDidMount() {\n    var connectionOptions = {\n      \"force new connection\": true,\n      \"reconnect\": true,\n      \"reconnectionAttempts\": \"Infinity\",\n      \"timeout\": 10000,\n      \"transports\": [\"websocket\"]\n    };\n    const token = localStorage.getItem(\"token\");\n    console.log(\"token\", token);\n    console.log(\"game component mounted\");\n    console.log(\"players\", this.state.players);\n    console.log(\"props\", this.props);\n    var res = await axios.get(`http://localhost:3001/quizquestions/getQuestions/${this.props.quiz._id}`, {\n      headers: {\n        'auth-token': token\n      }\n    });\n    this.setState({\n      questions: res.data\n    });\n    this.generatePin();\n    Socket.on('room-joined', data => {\n      console.log(\"game room joined\", data);\n      this.addPlayer(data.name, data.id, data.pin);\n    });\n    Socket.on('host-joined', data => {\n      console.log(\"host room joined\", data);\n      this.addHost(data.id);\n    });\n    Socket.on('player-answer', data => {\n      this.submitAnswer(data.name, data.answer);\n    });\n    Socket.on(\"left\", data => {\n      console.log(\"left event call\");\n      console.log(\"data\", data);\n      this.removePlayer(data.id);\n    });\n    Socket.on(\"pin-checked\", data => {\n      console.log(\"data\", data);\n      console.log(\"pin\", data.pin);\n      console.log(data.len, data.clen);\n      var length = data.len;\n      var current_length = data.clen;\n      console.log(\"game pin\", this.state.pin);\n\n      if (data.pin == this.state.pin) {\n        var valid = true;\n      } else {\n        var valid = false;\n      }\n\n      console.log(\"valid\", valid);\n\n      if (valid == true) {\n        current_length = length;\n        Socket.emit(\"valid\", valid);\n      } else {\n        if (data.len == data.clen) {\n          Socket.emit(\"valid\", valid);\n        }\n      }\n    });\n  }\n\n  removePlayer(id) {\n    let {\n      players\n    } = this.state;\n    console.log(\"players\", players);\n    const result = players.filter(player => player.id != id);\n    console.log(\"result\", result);\n    this.setState({\n      players: result\n    }, () => {\n      console.log(this.state.players, 'players');\n    });\n  }\n\n  generatePin() {\n    console.log(\"generate pin called\");\n    console.log(\"props\", this.props);\n    let newPin = Math.floor(Math.random() * 9000, 10000); // console.log(\"pin\", newPin);\n\n    this.setState({\n      pin: newPin\n    });\n    Socket.emit('host-join', {\n      pin: newPin\n    });\n    this.props.selectedPin(this.state.pin);\n    this.props.editHostPins(this.state.pin);\n  }\n\n  startGame() {\n    // console.log(\"Game Started\");\n    let {\n      players\n    } = this.state;\n    console.log(\"players\", players);\n    console.log(\"players length\", players.length);\n\n    if (players[0] && players[1]) {\n      this.nextQuestion();\n      this.setState({\n        isLive: true\n      });\n    } else {\n      alert('You need at least 2 players to start');\n    } // this.nextQuestion();\n    // this.setState({\n    //     isLive: true\n    // })\n\n  }\n\n  questionOver() {\n    console.log(\"question over call\");\n    let {\n      pin,\n      players\n    } = this.state; // console.log(\"pin\", pin);\n\n    Socket.emit('question-over', {\n      pin\n    });\n    let updatedPlayers = [...players];\n    updatedPlayers.forEach(player => {\n      player.qAnswered = false;\n      player.answeredCorrect = false;\n    });\n    this.getLeaderBoard();\n    this.setState({\n      questionOver: true,\n      currentQuestion: this.state.currentQuestion + 1\n    });\n  }\n\n  timeKeeper() {\n    let internalTimer = 20;\n    console.log(\"timekeeper called\");\n    let players = [...this.state.players];\n    console.log(\"players\", players);\n    this.setState({\n      questionOver: false\n    });\n    timeCheck = timeCheck.bind(this);\n\n    function timeCheck() {\n      // console.log(\"timecheck called\");\n      console.log(\"internaleTimer\", internalTimer);\n\n      let checkAnswers = () => {\n        let pAnswered = 0;\n        players.forEach(player => {\n          return player.qAnswered ? ++pAnswered : null;\n        });\n        players.forEach(player => {\n          // console.log(\"correct/incorrect\",player.answeredCorrect);\n          if (player.answeredCorrect) {\n            console.log(player.name + \"answer correctlye\");\n            console.log(\"internal timer\" + internalTimer);\n            var score = internalTimer * 10 + 1000;\n            console.log(\"score\", score);\n            player.score += internalTimer * 10 + 1000;\n            Socket.emit('sent-info', {\n              id: player.id,\n              pin: this.state.pin,\n              score: player.score,\n              answeredCorrect: player.answeredCorrect\n            });\n          }\n        });\n        console.log(\"internal timer\" + internalTimer);\n\n        if (internalTimer == 4) {\n          this.audio1.play();\n        }\n\n        return pAnswered === players.length ? internalTimer = 0 : internalTimer -= 1; // return internalTimer -= 1;\n      };\n\n      let endQuestion = () => {\n        clearInterval(timeKept);\n        this.questionOver();\n      };\n\n      return internalTimer > 0 ? checkAnswers() : endQuestion();\n    }\n\n    let timeKept = setInterval(() => {\n      timeCheck();\n    }, 1000);\n    return timeKept;\n  }\n\n  nextQuestion() {\n    console.log(\"next question called\");\n    let {\n      pin,\n      questions,\n      currentQuestion\n    } = this.state;\n    this.timeKeeper();\n\n    if (currentQuestion === questions.length) {\n      this.setState({\n        gameOver: true\n      });\n      Socket.emit('game-over');\n    } else {\n      Socket.emit('next-question', {\n        pin\n      });\n    } // currentQuestion === questions.length\n    //     ? this.setState({ gameOver: true })\n    //     this.Socket.emit('question-over')\n    //     :\n    // this.Socket.emit('next-question', { pin })\n\n\n    this.setState({\n      questionOver: false\n    });\n  }\n\n  addHost(id) {\n    this.setState({\n      HostId: id\n    });\n  }\n\n  addPlayer(name, id, pin) {\n    console.log(\"im in add player\");\n\n    if (pin == this.state.pin) {\n      this.audio.play(); // this.setState({id:id})\n      //  audio.play();\n\n      console.log(\"add player call\");\n      console.log(\"add player name\", name); // console.log(\"id\",id);\n\n      console.log(\"players\", this.state.players);\n      console.log(id + \"\" + pin);\n      var new_id = id + \"\" + pin; // console.log(\"add player id\", id);\n\n      let player = {\n        id: id,\n        // this is now their socket id so they can pull their score to the player component using this\n        name: name,\n        score: 0,\n        qAnswered: false,\n        answeredCorrect: false\n      };\n      console.log(\"player\", player);\n      let newPlayers = [...this.state.players];\n      newPlayers.push(player);\n      console.log(\"newPLayers\", newPlayers);\n      this.setState({\n        players: newPlayers,\n        playerCounter: this.state.playerCounter + 1\n      }, () => {\n        console.log(this.state.players, 'players');\n      });\n    }\n  }\n\n  submitAnswer(name, answer) {\n    console.log(\"Game submit answer call\");\n    console.log(\"name\", name);\n    console.log(\"answer\", answer);\n    console.log(\"players\", this.state.players);\n    let player = this.state.players.filter(player => {\n      console.log(\"play\", player);\n      return player.name === name;\n    });\n    console.log(\"player\", player);\n    let updatedPlayers = this.state.players.filter(player => player.name !== name);\n    console.log(\"updatedPlayers\", updatedPlayers); // player.forEach(play => {\n    //     console.log(\"play\",play);\n    //     play.qAnswered = true;\n    // }\n\n    console.log(\"false\", player.qAnswered);\n    player[0].qAnswered = true; // player[0].qAnswered = true;\n\n    console.log(\"correctAnswer\", this.state.questions[this.state.currentQuestion].correctAnswer);\n    answer === this.state.questions[this.state.currentQuestion].correctAnswer ? player[0].answeredCorrect = true : player[0].answeredCorrect = false;\n    updatedPlayers.push(player[0]);\n    this.setState({\n      players: updatedPlayers\n    });\n  }\n\n  getLeaderBoard() {\n    console.log(\"leaderboard gets called\");\n    let unsorted = [...this.state.players];\n    console.log(this.state.players);\n    let leaderboard = unsorted.sort((a, b) => b.score - a.score);\n    console.log(\"leaderboard\", leaderboard);\n    this.setState({\n      leaderBoard: leaderboard\n    });\n  }\n\n  render() {\n    console.log(this.props);\n    var userId = this.props.match.params.id;\n    console.log(\"userId\", userId);\n    let {\n      pin,\n      questions,\n      currentQuestion,\n      isLive,\n      questionOver,\n      gameOver,\n      playersLength\n    } = this.state; // let mappedPlayers = this.state.players;\n\n    let mappedPlayers = this.state.players.map(player => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [player.name, \" Joined the game\"]\n        }, player.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }, this)\n      }, void 0, false);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"component-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Kwizz Pin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: pin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }, this), !isLive && !questionOver && !gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-players\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.startGame(),\n          className: \"btn-play\",\n          children: \"Play\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"player-name\",\n          id: \"player-join\",\n          children: \"Players joined!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 29\n        }, this), mappedPlayers]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 25\n      }, this) : isLive && !questionOver && !gameOver ? /*#__PURE__*/_jsxDEV(GameQuestions, {\n        question: questions[currentQuestion].question,\n        answer1: questions[currentQuestion].answer1,\n        answer2: questions[currentQuestion].answer2,\n        answer3: questions[currentQuestion].answer3,\n        answer4: questions[currentQuestion].answer4,\n        questionOver: this.questionOver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(GameQuestionOver, {\n        nextQuestion: this.nextQuestion,\n        leaderboard: this.state.leaderBoard,\n        lastQuestion: this.state.questions.length === this.state.currentQuestion,\n        userId: userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(\"state\", state);\n  return {\n    quiz: state.quiz,\n    selectedPin: state.selectedPin,\n    hostPinsArray: state.hostPinsArray\n  };\n} // export default connect(null, {selectedPin })(Game)\n\n\nexport default connect(mapStateToProps, {\n  selectedPin,\n  editHostPins\n})(Game); // export default connect(mapStateToProps)(Game)\n// export default connect(mapStateToProps,{selectedPin})(Game)","map":{"version":3,"sources":["/Users/ruchikaashokbharati/Documents/Projects/Backend_Kahoot-main/client/src/components/Game/Game.js"],"names":["React","Component","axios","io","connect","selectedPin","editHostPins","sound1","GameQuestions","GameQuestionOver","Socket","sound","jwt","Game","constructor","state","pin","timer","isLive","questionOver","gameOver","currentQuestion","questions","players","playersLength","playerCounter","leaderBoard","bind","nextQuestion","audio","Audio","audio1","componentDidMount","connectionOptions","token","localStorage","getItem","console","log","props","res","get","quiz","_id","headers","setState","data","generatePin","on","addPlayer","name","id","addHost","submitAnswer","answer","removePlayer","len","clen","length","current_length","valid","emit","result","filter","player","newPin","Math","floor","random","startGame","alert","updatedPlayers","forEach","qAnswered","answeredCorrect","getLeaderBoard","timeKeeper","internalTimer","timeCheck","checkAnswers","pAnswered","score","play","endQuestion","clearInterval","timeKept","setInterval","HostId","new_id","newPlayers","push","correctAnswer","unsorted","leaderboard","sort","a","b","render","userId","match","params","mappedPlayers","map","question","answer1","answer2","answer3","answer4","mapStateToProps","hostPinsArray"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { io } from 'socket.io-client';\nimport { connect } from 'react-redux';\nimport { selectedPin, editHostPins } from '../../Reducer/Reducer';\nimport sound1 from '../../Assets/counter.wav';\nimport GameQuestions from './Game_Questions';\nimport GameQuestionOver from './Game_Question_Over';\nimport Socket from \"../../Socket\";\nimport sound from '../../Assets/ting.mp3';\nimport jwt from \"jsonwebtoken\";\nimport \"./Game.css\";\nclass Game extends Component {\n    constructor() {\n        super();\n        this.state = {\n            pin: 0,\n            timer: 20,\n            isLive: false,\n            questionOver: false,\n            gameOver: false,\n            currentQuestion: 0,\n            questions: [],\n            players: [],\n            playersLength: 'false',\n            playerCounter: 0,\n            leaderBoard: [],\n        }\n        this.questionOver = this.questionOver.bind(this);\n        this.nextQuestion = this.nextQuestion.bind(this);\n        this.audio = new Audio(sound);\n        this.audio1 = new Audio(sound1);\n    }\n    async componentDidMount() {\n        var connectionOptions = {\n            \"force new connection\": true,\n            \"reconnect\": true,\n            \"reconnectionAttempts\": \"Infinity\",\n            \"timeout\": 10000,\n            \"transports\": [\"websocket\"]\n        };\n        const token = localStorage.getItem(\"token\");\n        console.log(\"token\", token);\n        console.log(\"game component mounted\");\n        console.log(\"players\", this.state.players);\n        console.log(\"props\", this.props);\n\n        var res = await axios.get(`http://localhost:3001/quizquestions/getQuestions/${this.props.quiz._id}`, {\n            headers: {\n                'auth-token': token\n            }\n        })\n        this.setState({ questions: res.data })\n        this.generatePin();\n        Socket.on('room-joined', (data) => {\n            console.log(\"game room joined\", data);\n            this.addPlayer(data.name, data.id, data.pin)\n        })\n        Socket.on('host-joined', (data) => {\n            console.log(\"host room joined\", data);\n            this.addHost(data.id)\n        })\n        Socket.on('player-answer', (data) => {\n            this.submitAnswer(data.name, data.answer)\n        })\n        Socket.on(\"left\", (data) => {\n            console.log(\"left event call\");\n            console.log(\"data\", data);\n            this.removePlayer(data.id);\n        })\n        Socket.on(\"pin-checked\", (data) => {\n            console.log(\"data\", data);\n            console.log(\"pin\", data.pin);\n            console.log(data.len, data.clen);\n            var length = data.len;\n            var current_length = data.clen;\n            console.log(\"game pin\", this.state.pin);\n            if (data.pin == this.state.pin) {\n                var valid = true;\n            } else {\n                var valid = false;\n            }\n            console.log(\"valid\", valid);\n            if (valid == true) {\n                current_length = length;\n                Socket.emit(\"valid\", valid);\n            } else {\n                if (data.len == data.clen) {\n                    Socket.emit(\"valid\", valid);\n                }\n            }\n\n        })\n    }\n    removePlayer(id) {\n        let { players } = this.state;\n        console.log(\"players\", players);\n        const result = players.filter(player => player.id != id);\n        console.log(\"result\", result);\n        this.setState({ players: result }, () => {\n            console.log(this.state.players, 'players')\n        });\n\n    }\n    generatePin() {\n        console.log(\"generate pin called\");\n        console.log(\"props\", this.props);\n        let newPin = Math.floor(Math.random() * 9000, 10000)\n        // console.log(\"pin\", newPin);\n        this.setState({ pin: newPin })\n        Socket.emit('host-join', { pin: newPin });\n        this.props.selectedPin(this.state.pin)\n        this.props.editHostPins(this.state.pin);\n    }\n    startGame() {\n        // console.log(\"Game Started\");\n        let { players } = this.state;\n        console.log(\"players\", players);\n        console.log(\"players length\", players.length);\n        if (players[0] && players[1]) {\n            this.nextQuestion()\n            this.setState({\n                isLive: true\n            })\n        } else {\n            alert('You need at least 2 players to start')\n        }\n        // this.nextQuestion();\n        // this.setState({\n        //     isLive: true\n        // })\n    }\n    questionOver() {\n        console.log(\"question over call\");\n        let { pin, players } = this.state\n        // console.log(\"pin\", pin);\n        Socket.emit('question-over', { pin })\n        let updatedPlayers = [...players];\n        updatedPlayers.forEach((player) => {\n            player.qAnswered = false;\n            player.answeredCorrect = false;\n        })\n        this.getLeaderBoard()\n        this.setState({\n            questionOver: true,\n            currentQuestion: this.state.currentQuestion + 1,\n        })\n    }\n    timeKeeper() {\n        let internalTimer = 20;\n        console.log(\"timekeeper called\");\n        let players = [...this.state.players]\n        console.log(\"players\", players);\n        this.setState({ questionOver: false })\n        timeCheck = timeCheck.bind(this)\n        function timeCheck() {\n            // console.log(\"timecheck called\");\n            console.log(\"internaleTimer\", internalTimer);\n            let checkAnswers = () => {\n                let pAnswered = 0;\n                players.forEach((player) => {\n                    return player.qAnswered ? ++pAnswered : null\n                })\n                players.forEach(player => {\n                    // console.log(\"correct/incorrect\",player.answeredCorrect);\n\n                    if (player.answeredCorrect) {\n                        console.log(player.name + \"answer correctlye\")\n                        console.log(\"internal timer\" + internalTimer);\n                        var score = (internalTimer * 10 + 1000);\n                        console.log(\"score\", score);\n                        player.score += (internalTimer * 10 + 1000);\n                        Socket.emit('sent-info', { id: player.id, pin: this.state.pin, score: player.score, answeredCorrect: player.answeredCorrect })\n                    }\n                });\n                console.log(\"internal timer\" + internalTimer)\n                if (internalTimer == 4) {\n                    this.audio1.play();\n                }\n                return pAnswered === players.length ? internalTimer = 0 : internalTimer -= 1;\n                // return internalTimer -= 1;\n            }\n            let endQuestion = () => {\n                clearInterval(timeKept);\n                this.questionOver();\n            }\n\n            return internalTimer > 0\n                ? checkAnswers()\n                : endQuestion()\n        }\n        let timeKept = setInterval(() => { timeCheck() }, 1000);\n        return timeKept\n    }\n\n    nextQuestion() {\n        console.log(\"next question called\");\n        let { pin, questions, currentQuestion } = this.state;\n        this.timeKeeper();\n\n        if (currentQuestion === questions.length) {\n            this.setState({ gameOver: true })\n            Socket.emit('game-over')\n        } else {\n            Socket.emit('next-question', { pin })\n        }\n        // currentQuestion === questions.length\n        //     ? this.setState({ gameOver: true })\n        //     this.Socket.emit('question-over')\n        //     :\n        // this.Socket.emit('next-question', { pin })\n        this.setState({ questionOver: false })\n    }\n    addHost(id) {\n        this.setState({ HostId: id });\n    }\n    addPlayer(name, id, pin) {\n        console.log(\"im in add player\");\n        if (pin == this.state.pin) {\n            this.audio.play();\n            // this.setState({id:id})\n            //  audio.play();\n            console.log(\"add player call\");\n            console.log(\"add player name\", name);\n            // console.log(\"id\",id);\n            console.log(\"players\", this.state.players);\n            console.log(id + \"\" + pin);\n            var new_id = id + \"\" + pin;\n            // console.log(\"add player id\", id);\n            let player = {\n                id: id,\n                // this is now their socket id so they can pull their score to the player component using this\n                name: name,\n                score: 0,\n                qAnswered: false,\n                answeredCorrect: false\n            }\n            console.log(\"player\", player);\n            let newPlayers = [...this.state.players]\n            newPlayers.push(player)\n            console.log(\"newPLayers\", newPlayers);\n            this.setState({\n                players: newPlayers,\n                playerCounter: this.state.playerCounter + 1\n            }, () => {\n                console.log(this.state.players, 'players')\n            })\n        }\n\n    }\n    submitAnswer(name, answer) {\n        console.log(\"Game submit answer call\");\n        console.log(\"name\", name);\n        console.log(\"answer\", answer);\n        console.log(\"players\", this.state.players);\n        let player = this.state.players.filter(player => {\n            console.log(\"play\", player);\n            return player.name === name;\n        })\n        console.log(\"player\", player);\n        let updatedPlayers = this.state.players.filter(player => player.name !== name);\n        console.log(\"updatedPlayers\", updatedPlayers);\n        // player.forEach(play => {\n        //     console.log(\"play\",play);\n        //     play.qAnswered = true;\n        // }\n        console.log(\"false\", player.qAnswered);\n        player[0].qAnswered = true;\n        // player[0].qAnswered = true;\n        console.log(\"correctAnswer\", this.state.questions[this.state.currentQuestion].correctAnswer);\n        answer === this.state.questions[this.state.currentQuestion].correctAnswer\n            ? player[0].answeredCorrect = true\n            : player[0].answeredCorrect = false\n\n        updatedPlayers.push(player[0])\n        this.setState({\n            players: updatedPlayers\n        })\n    }\n\n    getLeaderBoard() {\n        console.log(\"leaderboard gets called\");\n        let unsorted = [...this.state.players];\n        console.log(this.state.players);\n        let leaderboard = unsorted.sort((a, b) => b.score - a.score)\n        console.log(\"leaderboard\", leaderboard)\n        this.setState({\n            leaderBoard: leaderboard\n        })\n    }\n    render() {\n        console.log(this.props);\n        var userId = this.props.match.params.id;\n        console.log(\"userId\", userId);\n        let { pin, questions, currentQuestion, isLive, questionOver, gameOver, playersLength } = this.state;\n        // let mappedPlayers = this.state.players;\n        let mappedPlayers = this.state.players.map(player => {\n            return (\n                <>\n                    <h2 key={player.id}>{player.name} Joined the game</h2></>\n            )\n        })\n        return (\n            <div className='component-container' >\n                <div>\n                    <p>Kwizz Pin</p>\n                    <h1>{pin}</h1>\n                </div>\n                {\n\n                    !isLive && !questionOver && !gameOver ?\n                        <div className='btn-players' >\n                            <button onClick={() => this.startGame()} className='btn-play' >Play</button>\n                            <p className='player-name' id='player-join'>Players joined!</p>\n\n                            {mappedPlayers}\n                        </div>\n                        :\n                        isLive && !questionOver && !gameOver ?\n                            <GameQuestions\n                                question={questions[currentQuestion].question}\n                                answer1={questions[currentQuestion].answer1}\n                                answer2={questions[currentQuestion].answer2}\n                                answer3={questions[currentQuestion].answer3}\n                                answer4={questions[currentQuestion].answer4}\n                                questionOver={this.questionOver} />\n                            :\n                            <GameQuestionOver\n                                nextQuestion={this.nextQuestion}\n                                leaderboard={this.state.leaderBoard}\n                                lastQuestion={this.state.questions.length === this.state.currentQuestion}\n                                userId={userId}\n                            />\n                }\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    console.log(\"state\", state)\n    return {\n        quiz: state.quiz,\n        selectedPin: state.selectedPin,\n        hostPinsArray: state.hostPinsArray\n    }\n}\n// export default connect(null, {selectedPin })(Game)\nexport default connect(mapStateToProps, { selectedPin, editHostPins })(Game)\n\n// export default connect(mapStateToProps)(Game)\n// export default connect(mapStateToProps,{selectedPin})(Game)"]},"metadata":{},"sourceType":"module"}